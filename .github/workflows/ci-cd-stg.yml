name: Publish Docker image and CD Staging
run-name: ${{ github.actor }} is building a staging environment
on:
    push:
        # 検証用コード
        branches: [feature/#8_cicd]
#     branches: [main]
#   pull_request:
#     branches: [main]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      # リポジトリからコードをチェックアウト
      - name: Check out the repo
        uses: actions/checkout@v4

      # Docker Hubへログイン
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # メタデータ設定
      - name: Extract metadata (tags, labels) for App
        id: meta-app
        uses: docker/metadata-action@v4
        with:
          images: artsa2/art-sa2-shop:app

      - name: Extract metadata (tags, labels) for Web
        id: meta-web
        uses: docker/metadata-action@v4
        with:
          images: artsa2/art-sa2-shop:web

      # イメージをビルドして Docker Hubにプッシュする
      - name: Build and push Docker image App
        id: push-app
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./infra/prod/app/Dockerfile
          push: true
          tags: artsa2/art-sa2-shop:app-latest
          labels: ${{ steps.meta-app.outputs.labels }}

      - name: Build and push Docker image Web
        id: push-web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/prod/web/Dockerfile
          push: true
          tags: artsa2/art-sa2-shop:web-latest
          labels: ${{ steps.meta-web.outputs.labels }}

      # ビルドプロセスの認証情報生成
      - name: Generate artifact attestation App
        uses: actions/attest-build-provenance@v1
        with:
           subject-name: docker.io/artsa2/art-sa2-shop # 認証情報を生成する対象の名前
           subject-digest: ${{ steps.push-app.outputs.digest }} # 前のステップで生成されたイメージのダイジェストを使用する
           push-to-registry: true

      - name: Generate artifact attestation Web
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: docker.io/artsa2/art-sa2-shop
          subject-digest: ${{ steps.push-web.outputs.digest }}
          push-to-registry: true

      # Docker イメージのビルドおよびプッシュが成功した場合、メッセージをログに出力する
      - name: Post build actions
        if: success()
        run: echo "Docker images built, pushed, and attestation generated successfully!"

  deploy-to-staging:
    runs-on: ubuntu-22.04
    needs: push_to_registry
    steps:
      # IP取得ライブラリをインストール
      - name: Public IP Install
        id: ip
        uses: haythem/public-ip@v1.3

      # AWS CLIをインストールする
      - name: AWS CLI install
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      # AWS CLIにキーを設定をする
      - name: AWS set Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Deploy to Staging
        run: |
          # SSHのセキュリティグループを開放する
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.STG_EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

          # SSH接続
          ssh -vvv -oStrictHostKeyChecking=no ${{ secrets.STG_USER_NAME }}@${{ secrets.STG_HOST_NAME }} -i private_key << 'EOF'
            # 既存のリポジトリフォルダを削除
            if [ -d "/web/E-Commerce-Webapp-with-Stripe-Sync/src" ]; then
              cd /web/E-Commerce-Webapp-with-Stripe-Sync/src
              sudo docker compose down

              # 残っているコンテナとネットワークの強制削除
              CONTAINERS=\$(docker ps -a -q)
              if [ -n "\$CONTAINERS" ]; then
                docker rm -f \$CONTAINERS
              fi

              NETWORKS=\$(docker network ls | grep 'src_default' | awk '{print \$1}')
              if [ -n "\$NETWORKS" ]; then
                docker network rm \$NETWORKS
              fi

              cd /web
              rm -rf /E-Commerce-Webapp-with-Stripe-Sync
            fi

             # GitHubから新たにリポジトリをクローン
             git clone --branch ${{ github.head_ref || github.ref }} git@github.com:recursion-backend-projects/E-Commerce-Webapp-with-Stripe-Sync.git

             # Docker Hubから最新イメージをpull
             docker pull artsa2/art-sa2-shop:app-latest
             docker pull artsa2/art-sa2-shop:web-latest

             # Docker Composeで新しいコンテナを起動
             cd E-Commerce-Webapp-with-Stripe-Sync/src
             sudo docker compose -f compose.prod.yml up -d
          EOF

          # SSHのセキュリティグループを閉じる
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.STG_EC2_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
